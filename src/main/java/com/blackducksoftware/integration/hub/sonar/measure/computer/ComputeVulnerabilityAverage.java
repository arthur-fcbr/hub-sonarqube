/**
 * Black Duck Hub Plugin for SonarQube
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.sonar.measure.computer;

import org.sonar.api.ce.measure.Component;
import org.sonar.api.ce.measure.Measure;
import org.sonar.api.ce.measure.MeasureComputer;

import com.blackducksoftware.integration.hub.sonar.measure.HubSonarMetrics;

public class ComputeVulnerabilityAverage implements MeasureComputer {
    @Override
    public MeasureComputerDefinition define(final MeasureComputerDefinitionContext defContext) {
        return defContext.newDefinitionBuilder().setOutputMetrics(HubSonarMetrics.NUM_COMPONENTS.getKey()).build();
    }

    @Override
    public void compute(final MeasureComputerContext context) {
        // FIXME needs to be updated to not use children
        if (context.getComponent().getType() != Component.Type.FILE) {
            int sum = 0;
            int count = 0;
            for (final Measure child : context.getChildrenMeasures(HubSonarMetrics.NUM_COMPONENTS.getKey())) {
                sum += child.getIntValue();
                count++;
            }
            final int average = count == 0 ? 0 : sum / count;
            context.addMeasure(HubSonarMetrics.NUM_COMPONENTS.getKey(), average);
        }
    }
}
