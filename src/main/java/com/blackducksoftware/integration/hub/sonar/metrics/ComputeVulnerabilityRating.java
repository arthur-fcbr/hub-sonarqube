/**
 * Black Duck Hub Plugin for SonarQube
 *
 * Copyright (C) 2017 Black Duck Software, Inc.
 * http://www.blackducksoftware.com/
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package com.blackducksoftware.integration.hub.sonar.metrics;

import org.sonar.api.ce.measure.Measure;
import org.sonar.api.ce.measure.MeasureComputer;

public class ComputeVulnerabilityRating implements MeasureComputer {
    private static final int THRESHOLD = 15;
    public static final int RATING_A = 1;
    public static final int RATING_B = 2;
    public static final int RATING_C = 3;
    public static final int RATING_D = 4;
    public static final int RATING_E = 5;
    public static final int RATING_F = 6;

    @Override
    public MeasureComputerDefinition define(final MeasureComputerDefinitionContext defContext) {
        return defContext.newDefinitionBuilder().setInputMetrics(HubSonarMetrics.NUM_COMPONENTS.getKey()).setOutputMetrics(HubSonarMetrics.NUM_COMPONENTS_RATING.getKey()).build();
    }

    @Override
    public void compute(final MeasureComputerContext context) {
        // TODO use hub component vulnerability levels to generate ratings
        final Measure size = context.getMeasure(HubSonarMetrics.NUM_COMPONENTS.getKey());
        if (size != null) {
            // rating values are currently implemented as integers in API
            int rating = RATING_A;
            if (size.getIntValue() > THRESHOLD * 4) {
                rating = RATING_F;
            } else if (size.getIntValue() > THRESHOLD * 3) {
                rating = RATING_D;
            }
            if (size.getIntValue() > THRESHOLD * 2) {
                rating = RATING_C;
            } else if (size.getIntValue() > THRESHOLD) {
                rating = RATING_B;
            }
            context.addMeasure(HubSonarMetrics.NUM_COMPONENTS_RATING.getKey(), rating);
        }
    }

}
